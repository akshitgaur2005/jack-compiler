#+title: Plan
#+author: Akshit Gaur

* Types of Tokens
** Lexical Elements
*** keyword: 'class', 'constructor', 'function', 'method', 'field', 'static', 'var', 'int', 'char', 'boolean', 'void', 'true', 'false', 'null', 'this', 'let', 'do', 'if', 'else', 'while', 'return'
*** symbol: '{', '}', '(', ')', '.', ',', ';', '+', '-', '*', '/', '&', '|', '<', '>', '=', '~'
*** integerConstant: A decimal number in range 0..32767
*** stringConstant: '"' A sequence of Unicode characters not including double quote or newline '"
*** identifier: A sequence of letters, digits, and underscore not starting with a digit

** Program Structure
*** class: 'class' className '{' classVarDec* subroutineDec* '}'
*** classVarDec: ('static' | 'field') type varName (',' varName)* ';'
*** type: 'int' | 'char' | 'boolean' | className
*** subroutineDec: ('contructor' | 'function' | 'method') ('void' | type) subroutineName '(' paramterList ')' subroutineBody
*** parameterList: ((type varName) (',' type varName))
*** subroutineBody: '{' varDec* statements '}'
*** varDec: 'var' type varName (',' varName)* ';'
*** className: identifier
*** subroutineName: identifier
*** varName: identifier

** Statements
*** statements: statement*
*** statement: letStatement | ifStatement | whileStatement | doStatement | returnStatement
*** letStatement: 'let' varName ('[' expression ']')? '=' expression ';'
*** ifStatement: 'if' '(' expression ')' '{' statements '}' ('else' '{' statements '}')?
*** whileStatement: 'while' '{' expression '}' '{' statements '}'
*** doStatement: 'do' subroutineCall ';'
*** returnStatement: 'return' expression ';'

** Expressions
*** expression: term (op term)*
*** term: intConst | strConst | keywordConst | varName | varName '[' expression ']' | subroutineCall | '(' expression ')' | unaryOp term
*** subroutineCall: subroutineName '(' expressionList ')' | (className | varName) '.' subroutineName '(' expressionList ')'
*** expressionList: (expression (',' expression)*)?
*** op: '+' | '-' | '*' | '/' | '&' | '<' | '>' | '='
*** unaryOP: '-' | '~'
*** keywordConst: 'true' | 'false' | 'null' | 'this'
